#include <stdio.h>
#include <string.h>

// Function to find and return the index of the first occurrence of a string in a file
int findString(FILE *fp, const char *str)
{
    if (fp == NULL || str == NULL)
    {
        return -1; // Invalid input
    }

    char line[256]; // Buffer to read lines from the file
    int lineIndex = 0; // Line index
    int found = 0; // Flag to indicate if the string is found

    while (fgets(line, sizeof(line), fp) != NULL)
    {
        lineIndex++;

        // Check if the string is in the current line
        char *position = strstr(line, str);
        if (position != NULL)
        {
            found = 1;
            int index = position - line; // Calculate the index of the substring in the line
            fclose(fp);
            return (lineIndex - 1) * sizeof(line) + index;
        }
    }

    fclose(fp);

    if (!found)
    {
        return -1; // String not found in the file
    }

    return -1; // Shouldn't reach here, but return -1 to indicate an error
}

// Function to delete the first occurrence of a string in a file
int deleteString(FILE *fp, const char *str)
{
    if (fp == NULL || str == NULL)
    {
        return 0; // Invalid input
    }

    FILE *tempFile = tmpfile(); // Create a temporary file to write the modified content

    if (tempFile == NULL)
    {
        return 0; // Error creating temporary file
    }

    char line[256]; // Buffer to read lines from the file
    int found = 0; // Flag to indicate if the string is found and deleted

    while (fgets(line, sizeof(line), fp) != NULL)
    {
        if (!found)
        {
            // Check if the string is in the current line
            char *position = strstr(line, str);
            if (position != NULL)
            {
                found = 1;
                // Copy the part of the line before the string to the temporary file
                fwrite(line, 1, position - line, tempFile);
                continue; // Skip the string in the original file
            }
        }
        // Write the entire line to the temporary file
        fputs(line, tempFile);
    }

    fclose(fp);
    fclose(tempFile);

    if (found)
    {
        // Replace the original file with the temporary file
        remove("your_filename.txt"); // Remove the original file
        rename("tempfile.tmp", "your_filename.txt"); // Rename the temporary file to the original filename
        return 1; // String found and deleted
    }

    return 0; // String not found in the file
}










#include <stdio.h>
#include <string.h>

int findString(FILE *fp, const char *str) {
    if (fp == NULL || str == NULL) {
        return -1; // Return -1 on error
    }

    char line[256]; // Assuming a maximum line length of 255 characters
    int lineNumber = 1; // Initialize line number to 1

    while (fgets(line, sizeof(line), fp) != NULL) {
        if (strstr(line, str) != NULL) {
            // String found, return the line number (index)
            return lineNumber;
        }
        lineNumber++;
    }

    // String not found in the file
    return -1;
}

int deleteString(FILE *fp, const char *str) {
    if (fp == NULL || str == NULL) {
        return 0; // Return 0 on error
    }

    FILE *tempFile = tmpfile(); // Create a temporary file

    if (tempFile == NULL) {
        return 0; // Return 0 on error
    }

    int deleted = 0; // Flag to track if a deletion occurred
    char line[256]; // Assuming a maximum line length of 255 characters

    while (fgets(line, sizeof(line), fp) != NULL) {
        if (deleted || strstr(line, str) == NULL) {
            // Write lines to the temporary file if not deleted or not a match
            fputs(line, tempFile);
        } else if (!deleted) {
            // String found and not deleted yet, skip this line
            deleted = 1;
        }
    }

    if (deleted) {
        // Rewind both files and copy the temporary file back to the original file
        rewind(fp);
        rewind(tempFile);

        char c;
        while ((c = fgetc(tempFile)) != EOF) {
            fputc(c, fp);
        }

        // Close and delete the temporary file
        fclose(tempFile);
    } else {
        // If nothing was deleted, close and discard the temporary file
        fclose(tempFile);
    }

    return deleted;
}
