#include <stdio.h>
#include <string.h>

// Function to find and return the index of the first occurrence of a string in a file
int findString(FILE *fp, const char *str)
{
    if (fp == NULL || str == NULL)
    {
        return -1; // Invalid input
    }

    char line[256]; // Buffer to read lines from the file
    int lineIndex = 0; // Line index
    int found = 0; // Flag to indicate if the string is found

    while (fgets(line, sizeof(line), fp) != NULL)
    {
        lineIndex++;

        // Check if the string is in the current line
        char *position = strstr(line, str);
        if (position != NULL)
        {
            found = 1;
            int index = position - line; // Calculate the index of the substring in the line
            fclose(fp);
            return (lineIndex - 1) * sizeof(line) + index;
        }
    }

    fclose(fp);

    if (!found)
    {
        return -1; // String not found in the file
    }

    return -1; // Shouldn't reach here, but return -1 to indicate an error
}

// Function to delete the first occurrence of a string in a file
int deleteString(FILE *fp, const char *str)
{
    if (fp == NULL || str == NULL)
    {
        return 0; // Invalid input
    }

    FILE *tempFile = tmpfile(); // Create a temporary file to write the modified content

    if (tempFile == NULL)
    {
        return 0; // Error creating temporary file
    }

    char line[256]; // Buffer to read lines from the file
    int found = 0; // Flag to indicate if the string is found and deleted

    while (fgets(line, sizeof(line), fp) != NULL)
    {
        if (!found)
        {
            // Check if the string is in the current line
            char *position = strstr(line, str);
            if (position != NULL)
            {
                found = 1;
                // Copy the part of the line before the string to the temporary file
                fwrite(line, 1, position - line, tempFile);
                continue; // Skip the string in the original file
            }
        }
        // Write the entire line to the temporary file
        fputs(line, tempFile);
    }

    fclose(fp);
    fclose(tempFile);

    if (found)
    {
        // Replace the original file with the temporary file
        remove("your_filename.txt"); // Remove the original file
        rename("tempfile.tmp", "your_filename.txt"); // Rename the temporary file to the original filename
        return 1; // String found and deleted
    }

    return 0; // String not found in the file
}










#include <stdio.h>
#include <string.h>

int findString(FILE *fp, const char *str) {
    if (fp == NULL || str == NULL) {
        return -1; // Return -1 on error
    }

    char line[256]; // Assuming a maximum line length of 255 characters
    int lineNumber = 1; // Initialize line number to 1

    while (fgets(line, sizeof(line), fp) != NULL) {
        if (strstr(line, str) != NULL) {
            // String found, return the line number (index)
            return lineNumber;
        }
        lineNumber++;
    }

    // String not found in the file
    return -1;
}

int deleteString(FILE *fp, const char *str) {
    if (fp == NULL || str == NULL) {
        return 0; // Return 0 on error
    }

    FILE *tempFile = tmpfile(); // Create a temporary file

    if (tempFile == NULL) {
        return 0; // Return 0 on error
    }

    int deleted = 0; // Flag to track if a deletion occurred
    char line[256]; // Assuming a maximum line length of 255 characters

    while (fgets(line, sizeof(line), fp) != NULL) {
        if (deleted || strstr(line, str) == NULL) {
            // Write lines to the temporary file if not deleted or not a match
            fputs(line, tempFile);
        } else if (!deleted) {
            // String found and not deleted yet, skip this line
            deleted = 1;
        }
    }

    if (deleted) {
        // Rewind both files and copy the temporary file back to the original file
        rewind(fp);
        rewind(tempFile);

        char c;
        while ((c = fgetc(tempFile)) != EOF) {
            fputc(c, fp);
        }

        // Close and delete the temporary file
        fclose(tempFile);
    } else {
        // If nothing was deleted, close and discard the temporary file
        fclose(tempFile);
    }

    return deleted;
}









#include <stdio.h>
#include <string.h>

int findString(FILE *fp, const char *str) {
    if (fp == NULL || str == NULL) {
        return -1; // Invalid inputs
    }

    char line[256]; // Adjust the buffer size as needed
    int index = 0;

    while (fgets(line, sizeof(line), fp) != NULL) {
        index++;
        if (strstr(line, str) != NULL) {
            // String found
            return index;
        }
    }

    if (ferror(fp)) {
        return -1; // Error reading the file
    }

    return -1; // String not found in the file
}

int deleteString(FILE *fp, const char *str) {
    if (fp == NULL || str == NULL) {
        return 0; // Invalid inputs
    }

    FILE *tempFile = tmpfile(); // Create a temporary file
    if (tempFile == NULL) {
        return 0; // Error creating a temporary file
    }

    char line[256]; // Adjust the buffer size as needed
    int found = 0;

    while (fgets(line, sizeof(line), fp) != NULL) {
        if (strstr(line, str) != NULL && found == 0) {
            // String found and not previously deleted
            found = 1;
        } else {
            fputs(line, tempFile);
        }
    }

    if (ferror(fp)) {
        fclose(tempFile);
        return 0; // Error reading the file
    }

    rewind(fp); // Move file pointer back to the beginning

    while (fgets(line, sizeof(line), tempFile) != NULL) {
        fputs(line, fp); // Copy contents from the temporary file to the original file
    }

    fclose(tempFile);

    if (fflush(fp) != 0) {
        return 0; // Error writing to the original file
    }

    if (found) {
        return 1; // String was found and deleted
    } else {
        return 0; // String not found in the file
    }
}

int main() {
    FILE *file = fopen("example.txt", "r+"); // Replace "example.txt" with your file name

    if (file == NULL) {
        perror("Error opening the file");
        return 1;
    }

    int findResult = findString(file, "example"); // Replace "search_word" with the word you want to find
    int deleteResult = deleteString(file, "x"); // Replace "delete_word" with the word you want to delete

    if (findResult == -1) {
        printf("String not found in the file.\n");
    } else {
        printf("String found at line %d.\n", findResult);
    }

    if (deleteResult == -1) {
        printf("String not found for deletion.\n");
    } else {
        printf("String deleted.\n");
    }

    printf("Updated File Contents:\n");
    rewind(file); // Move file pointer back to the beginning

    char line[256];
    while (fgets(line, sizeof(line), file) != NULL) {
        printf("%s", line);
    }

    fclose(file);
    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int findString(FILE *fp, const char *str) {
    char buffer[1024]; // Adjust the buffer size as needed
    int index = 0;

    while (fgets(buffer, sizeof(buffer), fp) != NULL) {
        index++;
        if (strstr(buffer, str) != NULL) {
            return index;
        }
    }

    return -1;
}

int main() {
    FILE *fp;
    char filename[] = "hafiz.txt"; // Replace with your file name
    char searchStr[] = "hafiz"; // Replace with your search string

    fp = fopen(filename, "r");

    if (fp == NULL) {
        perror("Error opening file");
        return 1;
    }

    int result = findString(fp, searchStr);

    if (result != -1) {
        printf("String found at line: %d\n", result);
    } else {
        printf("String not found in the file.\n");
    }

    fclose(fp);
    return 0;
}
